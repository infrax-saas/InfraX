generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id           String       @id @default(uuid())
  googleId     String?      @unique
  githubId     String?      @unique
  email        String       @unique
  username     String
  image        String?
  passwordHash String?
  saas         SaaSConfig[]
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  username     String
  image        String?
  passwordHash String?
  otp          String?
  verified     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  googleId     String?        @unique
  githubId     String?        @unique
  saasId       String
  RefreshToken RefreshToken[]
  tenants      Tenant[]
  saas         SaaSConfig     @relation(fields: [saasId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ApiKey {
  id        String     @id @default(uuid())
  key       String     @unique
  createdAt DateTime   @default(now())
  saasId    String
  saas      SaaSConfig @relation(fields: [saasId], references: [id])
}

model SaaSConfig {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  name         String
  BillingPlans Json
  production   Boolean    @default(false)
  appUserId    String
  category     Category
  description  String
  status       Status
  ApiKey       ApiKey[]
  providers    Provider[]
  AppUser      AppUser    @relation(fields: [appUserId], references: [id])
  User         User[]
}

model Provider {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  saasConfigId String
  type         ProviderType
  appId        String
  secretKey    String
  enabled      Boolean      @default(true)
  saasConfig   SaaSConfig   @relation(fields: [saasConfigId], references: [id])

  @@unique([saasConfigId, type])
}

model Plan {
  id             String   @id @default(uuid())
  name           String   @unique
  monthlyPrice   Int
  apiLimit       Int
  storageLimitGB Int
  emailLimit     Int
  hasIsolatedDb  Boolean
  tenants        Tenant[]
}

model Tenant {
  id            String          @id @default(uuid())
  ownerUserId   String
  name          String
  planId        String
  createdAt     DateTime        @default(now())
  EmailTemplate EmailTemplate[]
  Integration   Integration[]
  StorageObject StorageObject[]
  owner         User            @relation(fields: [ownerUserId], references: [id])
  plan          Plan            @relation(fields: [planId], references: [id])
  usageEvents   UsageEvent[]
  Webhook       Webhook[]
}

model UsageEvent {
  id        String   @id @default(uuid())
  tenantId  String
  eventType String
  quantity  Int
  timestamp DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model EmailTemplate {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  subject   String
  body      String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model StorageObject {
  id          String   @id @default(uuid())
  tenantId    String
  filename    String
  contentType String
  sizeBytes   Int
  s3Key       String
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Integration {
  id           String    @id @default(uuid())
  tenantId     String
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
}

model Webhook {
  id        String   @id @default(uuid())
  tenantId  String
  targetUrl String
  secret    String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

enum ProviderType {
  google
  github
  apple
  microsoft
}

enum Category {
  Productivity
  Analytics
  Ecommerce
  Communication
  Finance
  AIML
  CRM
  Marketing
  Other
}

enum Status {
  active
  inactive
  developing
}
